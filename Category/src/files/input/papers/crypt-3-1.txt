SoK: Lessons Learned From Android Security Research
For Appified Software PlatformstitlerpAndroid security and privacy research has boomed
in recent years, far outstripping investigations of other appified
platforms. However, despite this attention, research efforts are
fragmented and lack any coherent evaluation framework. We
present a systematization of Android security and privacy research
with a focus on the appification of software systems. To put
Android security and privacy research into context, we compare
the concept of appification with conventional operating system
and software ecosystems. While appification has improved some
issues (e.g., market access and usability), it has also introduced a
whole range of new problems and aggravated some problems
of the old ecosystems (e.g., coarse and unclear policy, poor
software development practices). Some of our key findings are
that contemporary research frequently stays on the beaten path
instead of following unconventional and often promising new
routes. Many security and privacy proposals focus entirely on the
Android OS and do not take advantage of the unique features and
actors of an appified ecosystem, which could be used to roll out
new security mechanisms less disruptively. Our work highlights
areas that have received the larger shares of attention, which
attacker models were addressed, who is the target, and who has
the capabilities and incentives to implement the countermeasures.
We conclude with lessons learned from comparing the appified
with the old world, shedding light on missed opportunities and
proposing directions for future research.abstractrpOver the last couple of years, the appification of software
has drastically changed the way software is produced and consumed
and how users interact with computer devices. With the
rise of web and mobile applications, the number of apps with
a highly specialized, tiny feature set drastically increased. In
appified ecosystems, there is an app for almost everything, and
the market entrance barrier is low, attracting many (sometimes
unprofessional) developers. Apps are encouraged to share
features through inter-component communication, while risks
are communicated to users via permission dialogs. Based on
the large body of research available for Android as the pioneer
of open source appified ecosystems, we center this paper’s
scope on Android security and privacy research. This choice
allows us to focus on the dominant appified ecosystem with a
large real-world deployment: Android.
Motivation for a Systematization of Android/Appification
Security. The large body of literature uncovered a myriad of
appification-specific security and privacy challenges as well
as countermeasures to face these new threats. As with all new
fields of endeavor, there is no unified approach to research. As
a consequence, efforts over the last half decade necessarily
pioneered ways to examine and harden these systems. A
problem with this approach is that there are lots of fragmented
efforts to improve security and privacy in an appified platform,
but no unified framework or understanding of the ecosystem as
a whole. Therefore, we believe that it is time to systematize the
research work on security and privacy in appified platforms,
to offer a basis for more systematic future research.
Challenges and Methodology of the Systematization. While
the fragmentation of the Android security research is our
main motivation, it is at the same time our biggest challenge.
Contributions to this research field have been made in many
different areas, such as static code analysis, access control
frameworks and policies, and usable security for end users as
well as app and platform developers. To objectively evaluate
and compare the different approaches, our first step will be to
create a common understanding of the different security and
privacy challenges and a universal attacker model to express
these threats. Security solutions are by default designed with
a very specific attacker model in mind. We found that in
most Android research, this attacker model has been only
implicitly expressed. However, to understand the role of a
(new) approach within the context of Android’s appified
ecosystem, it is also important to understand which attacker
capabilities it does not cover and how different approaches
can complement each other. By studying the evaluation details
of many representative approaches from the literature, we
create a unified understanding of attacker capabilities. This
forms the basis for analyzing the security benefits of different
solutions and lays the groundwork for comparing approaches
with respect to their role in the overall ecosystem.
One insight from our analysis of the challenges in Android’s
appified ecosystem, is that some security issues are new and
unique to Android, as caused by the appification paradigm
or the result of design decisions of its architects. Other wellknown
problems are aggravated by appification, while many
security issues are lessened or solved by the appification
paradigm. Such understanding is key to transcending Android
to develop a broader picture of the future of software systems
and the environments they will be placed in.
In particular, the tight integration of many non-traditional
actors in the appified ecosystem creates interesting problems
as well as opportunities. Platform developers, device vendors,
app markets, library providers, app developers, app publishers,
toolchain providers and end users all have different capabilities
and incentives to contribute (in)securely to the ecosystem. Our
systematization makes the important contribution of showing
how previous research has interacted with these actors, identifying
contributing factors to our research community’s work
creating a real-world impact.
Based on our systematization of this knowledge, we draw lessons learned from our community’s security research that
provide important insights into the design and implementation
of current and future appified software platforms. We also
create an overview of which areas have received focused
attention and point out areas where research went astray.
Finally, we address underrepresented areas that could benefit
from or require further analysis and effort.
Please note that we are not discussing plausible problems
and benefits of research solutions for adoption by Google or
other vendors. Such factors can be manifold, such as technical
reasons (e.g., backwards compatibility), business decisions
(e.g., interference with advertisement networks), protection
of app developers (e.g., intrusion of application sandboxes),
or usability aspects. However, without concrete first-hand
knowledge, any such discussion would merely result in speculation,
which we do not consider a tangible contribution of
a systematization of knowledge.
Systematization Methodology
There is a huge body of research work on Android security
with (conservatively) over 100 papers published. Since we
aim to systematize this research as opposed to offering a
complete survey [1], we extracted key aspects and key papers
to create a foundation for our systematization. The focus of
our systematization is on security issues and challenges in
the context of appification and the app market ecosystem. We
include both offensive works (i. e. papers that uncovered new
security issues or classes of attacks) as well as defensive ones
(i. e. papers that focus on countermeasures or new security
frameworks). However, we do not focus on malware on appified
platforms, as this has been dealt with in prior work [2].
We also exclude hardware-specific or other low level problems
on mobile platforms, such as CPU side-channels, differential
power analysis, or base-band attacks, which are independent
from appification.
We selected the research based on the following criteria:
Unique/Pioneering—Security issues which are unique to
the Android ecosystem, i.e. never been seen before.
Aggravated—Security issues which have greater impact
on an appified ecosystem than on traditional computing.
Attention—Research on aspects that received more attention
(i. e. many papers dealt with this specific aspect or
the papers received high citation counts).
Impact—Security research that affected a large number
of users (or devices).
Scope—Security issues which involve a large fraction of
the appified world’s actors. We include these issues since
they are particularly hard to fix.
Open Challenges—Research worked on issues or countermeasures
that remain “unfinished” and highlight interesting
and important areas of future work.
In the following, we systematize the research using the
above rubric, extract a unified attacker model and evaluate the
work both in terms of content and also on its placement within
the Android ecosystem. We identify actors that are responsible
for the problems, would benefit from solutions, and/or have the
capability to implement and deploy them.introductionrpThe central conclusion we draw from this systematization
is that, like many new technologies, Android is a story of both
victory and defeat. New security mechanisms were introduced
without a clear understanding of how these applications would
be developed and used, and well-established security mechanisms
were re-used to meet the expected security needs of the
new general purpose computing platform. Some of the these
techniques were a great success, while others failed almost
entirely. We draw the following meta-conclusion:Our meta-assessment: Some aspects worked out beautifully,
e.g., centralizing software distribution helps to
tackle critical security issues and makes fighting piracy
and malware easier. Other approaches had initial difficulties,
but are now more or less on track after research has
helped to identify and bridge them. Examples comprise
easier-to-use APIs that have started to replace hard-to-use
but well-intended security APIs over the last few years, as
well as the concept of Webification that has enabled more
developers to produce their own apps. However, some
approaches should be re-thought from the beginning and arguably abandoned for designs of future OSes: Permission
dialogs for end users should be removed entirely,
since they failed for the same reasons warning messages
have failed since the dawn of computing.conclusionrp[1] Sufatrio, D. J. J. Tan, T.-W. Chua, and V. L. L. Thing, “Securing
Android: A survey, taxonomy, and challenges,” ACM Comput. Surv.,
vol. 47, no. 4, pp. 58:1–58:45, May 2015.
[2] Y. Zhou and X. Jiang, “Dissecting android malware: Characterization
and evolution,” in Proc. 33rd IEEE Symposium on Security and Privacy
(SP’12). IEEE, 2012.
[3] P. McDaniel and W. Enck, “Not so great expectations: Why application
markets haven’t failed security,” Security Privacy, IEEE, vol. 8, no. 5,
pp. 76–78, Sept 2010.
[4] W. Enck, M. Ongtang, and P. McDaniel, “Understanding android
security,” IEEE Security and Privacy, vol. 7, no. 1, pp. 50–57, 2009.
[5] Open Signal, “Android fragmentation visualized (august 2015),” http:
//opensignal.com/reports/2015/08/android-fragmentation/, last visited:
11/06/2015.
[6] Samsung, “Knox,” Online: https://www.samsungknox.com, last visited:
11/13/2015.
[7] S. Fahl, S. Dechand, H. Perl, F. Fischer, J. Smrcek, and M. Smith,
“Hey, NSA: Stay Away from my Market! Future Proofing App Markets
against Powerful Attackers,” in Proc. 21st ACM Conference on
Computer and Communication Security (CCS’14). ACM, 2014.
[8] Google, “Google Report: Android Security 2014 Year in Review,”
2014.
[9] A. P. Felt, E. Ha, S. Egelman, A. Haney, E. Chin, and D. Wagner,
“Android permissions: User attention, comprehension, and behavior,”
in Proc. 8th Symposium on Usable Privacy and Security (SOUPS’12).
ACM, 2012.
[10] A. P. Felt, S. Egelman, and D. Wagner, “I’ve got 99 problems, but
vibration ain’t one: A survey of smartphone users’ concerns,” in Proc.
2nd ACM CCS Workshop on Security and Privacy in Mobile Devices
(SPSM’12). ACM, 2012.
[11] D. Barrera, J. Clark, D. McCarney, and P. C. van Oorschot, “Understanding
and improving app installation security mechanisms through
empirical analysis of android,” in Proc. 2nd Workshop on Security and
Privacy in Smartphones and Mobile Devices (SPSM ’12). ACM, 2012.
[12] X.Wei, L. Gomez, I. Neamtiu, and M. Faloutsos, “Permission evolution
in the Android ecosystem,” in Proc. 28th Annual Computer Security
Applications Conference (ACSAC’12). ACM, 2012.
[13] A. Porter Felt, E. Chin, S. Hanna, D. Song, and D. Wagner, “Android
permissions demystified,” in Proc. 18th ACM Conference on Computer
and Communication Security (CCS’11). ACM, 2011.
[14] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie, “Pscout: analyzing
the android permission specification,” in Proc. 19th ACM Conference
on Computer and Communication Security (CCS’12). ACM, 2012.
[15] L. Wu, M. Grace, Y. Zhou, C. Wu, and X. Jiang, “The impact of vendor
customizations on android security,” in Proc. 20th ACM Conference on
Computer and Communication Security (CCS’13). ACM, 2013.
[16] D. Barrera, H. G. Kayacik, P. C. Van Oorschot, and A. Somayaji,
“A methodology for empirical analysis of permission-based security
models and its application to android,” in Proc. 17th ACM Conference
on Computer and Communication Security (CCS’10). ACM, 2010.
[17] W. Enck, M. Ongtang, and P. McDaniel, “On lightweight mobile phone
application certification,” in Proc. 16th ACM Conference on Computer
and Communication Security (CCS’09). ACM, 2009.
[18] L. Davi, A. Dmitrienko, A. Sadeghi, and M. Winandy, “Privilege
escalation attacks on Android,” in Proc. 13th Information Security
Conference (ISC’10). Springer-Verlag, 2010.
[19] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner, “Analyzing
inter-application communication in Android,” in Proc. 9th International
Conference on Mobile Systems, Applications, and Services
(MobiSys’11). ACM, 2011.
[20] A. Porter Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin,
“Permission re-delegation: Attacks and defenses,” in Proc. 20th Usenix
Security Symposium (SEC’11). USENIX Association, 2011.
[21] E. Fragkaki, L. Bauer, L. Jia, and D. Swasey, “Modeling and enhancing
android’s permission system,” in Proc. 17th European Symposium on
Research in Computer Security (ESORICS’12). Springer-Verlag, 2012.
[22] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang, “Chex: statically vetting
android apps for component hijacking vulnerabilities,” in Proc. 19th
ACM Conference on Computer and Communication Security (CCS’12).
ACM, 2012.
[23] Y. Zhou and X. Jiang, “Detecting passive content leaks and pollution
in android applications,” in Proc. 20th Annual Network and Distributed
System Security Symposium (NDSS’13). The Internet Society, 2013.
[24] M. Grace, Y. Zhou, Z. Wang, and X. Jiang, “Systematic detection of
capability leaks in stock Android smartphones,” in Proc. 19th Annual
Network and Distributed System Security Symposium (NDSS’12). The
Internet Society, 2012.
[25] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri, “A Study of Android
Application Security,” in Proc. 20th Usenix Security Symposium
(SEC’11). USENIX Association, 2011.
[26] M. C. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi, “Unsafe exposure
analysis of mobile in-app advertisements,” in Proc. 5th ACM
Conference on Security and Privacy in Wireless and Mobile Networks
(WiSec’12). ACM, 2012.
[27] P. Pearce, A. Porter Felt, G. Nunez, and D. Wagner, “AdDroid: Privilege
separation for applications and advertisers in Android,” in Proc.
7th ACM Symposium on Information, Computer and Communication
Security (ASIACCS’12). ACM, 2012.
[28] R. Stevens, C. Gibler, J. Crussell, J. Erickson, and H. Chen, “Investigating
user privacy in android ad libraries,” in Proc. 2012 Mobile
Security Technologies Workshop (MoST’12). IEEE, 2012.
[29] N. Viennot, E. Garcia, and J. Nieh, “A measurement study of google
play,” in Proc. 2014 ACM International Conference on Measurement
and Modeling of Computer Systems (SIGMETRICS’14). ACM, 2014.
[30] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and G. Vigna,
“Execute this! analyzing unsafe and malicious dynamic code loading
in android applications,” in Proc. 21st Annual Network and Distributed
System Security Symposium (NDSS’14). The Internet Society, 2014.
[31] J. Crussell, R. Stevens, and H. Chen, “MAdFraud: Investigating Ad
Fraud in Android Applications,” in Proc. 12th International Conference
on Mobile Systems, Applications, and Services (MobiSys’14). ACM,
2014.
[32] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang, “Hey, you, get off
of my market: Detecting malicious apps in official and alternative
android markets,” in Proc. 19th Annual Network and Distributed System
Security Symposium (NDSS’12). The Internet Society, 2012.
[33] V. Rastogi, Y. Chen, and X. Jiang, “DroidChameleon: evaluating Android
anti-malware against transformation attacks,” in Proc. 8th ACM
Symposium on Information, Computer and Communication Security
(ASIACCS’13). ACM, 2013.
[34] V. S. Martin Georgiev, Suman Jana, “Breaking and fixing originbased
access control in hybrid web/mobile application frameworks,” in
Proc. 21st Annual Network and Distributed System Security Symposium
(NDSS’14). The Internet Society, 2014.
[35] R. Wang, L. Xing, X. Wang, and S. Chen, “Unauthorized origin
crossing on mobile platforms: Threats and mitigation,” in Proc. 20th
ACM Conference on Computer and Communication Security (CCS’13).
ACM, 2013.
[36] E. Chin and D. Wagner, “Bifocals: Analyzing webview vulnerabilities
in android applications,” in Proc. Information Security Applications.
Springer-Verlag, 2014.
[37] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin, “Attacks on WebView
in the Android system,” in Proc. 27th Annual Computer Security
Applications Conference (ACSAC’11). ACM, 2011.
[38] X. Jin, X. Hu, K. Ying, W. Du, H. Yin, and G. N. Peri, “Code injection
attacks on html5-based mobile apps: Characterization, detection and
mitigation,” in Proc. 21st ACM Conference on Computer and Communication
Security (CCS’14). ACM, 2014.[39] P. Mutchler, A. Doupé, J. Mitchell, C. Kruegel, and G. Vigna, “A
Large-Scale Study of Mobile Web App Security,” in Proc. 2015 Mobile
Security Technologies Workshop (MoST’15). IEEE, 2015.
[40] S. Fahl, M. Harbach, T. Muders, M. Smith, L. Baumgärtner, and
B. Freisleben, “Why Eve and Mallory love Android: An analysis
of Android SSL (in) security,” in Proc. 19th ACM Conference on
Computer and Communication Security (CCS’12). ACM, 2012.
[41] D. Sounthiraraj, J. Sahs, G. Greenwood, Z. Lin, and L. Khan, “Smvhunter:
Large scale, automated detection of ssl/tls man-in-the-middle
vulnerabilities in android apps,” in Proc. 21st Annual Network and
Distributed System Security Symposium (NDSS’14). The Internet
Society, 2014.
[42] S. Fahl, M. Harbach, H. Perl, M. Koetter, and M. Smith, “Rethinking
ssl development in an appified world,” in Proc. 20th ACM Conference
on Computer and Communication Security (CCS’13). ACM, 2013.
[43] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel, “An empirical
study of cryptographic misuse in android applications,” in Proc. 20th
ACM Conference on Computer and Communication Security (CCS’13).
ACM, 2013.
[44] S. Fahl, M. Harbach, M. Oltrogge, T. Muders, and M. Smith, “Hey,
You, Get Off of My Clipboard,” in Proc. 2013 Financial Cryptography
and Data Security (FC’13). Springer-Verlag, 2013.
[45] E. Y. Chen, Y. Pei, S. Chen, Y. Tian, R. Kotcher, and P. Tague,
“Oauth demystified for mobile application developers,” in Proc. 21st
ACM Conference on Computer and Communication Security (CCS’14).
ACM, 2014.
[46] A. P. Felt, M. Finifter, E. Chin, S. Hanna, and D. Wagner, “A survey
of mobile malware in the wild,” in Proc. 1st ACM CCS Workshop on
Security and Privacy in Mobile Devices (SPSM’11). ACM, 2011.
[47] W. Zhou, Y. Zhou, X. Jiang, and P. Ning, “Detecting repackaged
smartphone applications in third-party android marketplaces,” in Proc.
2nd ACM Conference on Data and Application Security and Privacy
(CODASPY’12). ACM, 2012.
[48] W. Zhou, Y. Zhou, M. Grace, X. Jiang, and S. Zou, “Fast, scalable
detection of "piggybacked" mobile applications,” in Proc. 3rd ACM
Conference on Data and Application Security and Privacy (CODASPY’
13). ACM, 2013.
[49] J. Crussell, C. Gibler, and H. Chen, “Attack of the clones: Detecting
cloned applications on android markets,” in Proc. 17th European Symposium
on Research in Computer Security (ESORICS’12). Springer-
Verlag, 2012.
[50] C. Gibler, R. Stevens, J. Crussell, H. Chen, H. Zang, and H. Choi,
“Adrob: Examining the landscape and impact of android application
plagiarism,” in Proc. 11th International Conference on Mobile Systems,
Applications, and Services (MobiSys’13). ACM, 2013.
[51] L. Xing, X. Pan, R. Wang, K. Yuan, and X. Wang, “Upgrading your
android, elevating my malware: Privilege escalation through mobile os
updating,” in Proc. 35th IEEE Symposium on Security and Privacy
(SP’14). IEEE, 2014.
[52] A. Moulo, “Android OEM’s applications (in)security and
backdoors without permission,” http://www.quarkslab.com/dl/
Android-OEM-applications-insecurity-and-backdoors-without-permission.
pdf.
[53] Y. Aafer, N. Zhang, Z. Zhang, X. Zhang, K. Chen, X. Wang, X. Zhou,
W. Du, and M. Grace, “Hare hunting in the wild android: A study on the
threat of hanging attribute references,” in Proc. 22nd ACM Conference
on Computer and Communication Security (CCS’15). ACM, 2015.
[54] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel,
and A. N. Sheth, “Taintdroid: An information-flow tracking system for
realtime privacy monitoring on smartphones,” in Proc. 9th Usenix Symposium
on Operating Systems Design and Implementation (OSDI’10).
USENIX Association, 2010.
[55] M. Nauman, S. Khan, and X. Zhang, “Apex: Extending Android
permission model and enforcement with user-defined runtime constraints,”
in Proc. 5th ACM Symposium on Information, Computer and
Communication Security (ASIACCS’10). ACM, 2010.
[56] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach, “Quire:
Lightweight provenance for smart phone operating systems,” in Proc.
20th Usenix Security Symposium (SEC’11). USENIX Association,
2011.
[57] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi, and
B. Shastry, “Towards taming privilege-escalation attacks on Android,”
in Proc. 19th Annual Network and Distributed System Security Symposium
(NDSS’12). The Internet Society, 2012.
[58] T. Vidas, N. Christin, and L. Cranor, “Curbing Android permission
creep,” in Proc. Workshop on Web 2.0 Security and Privacy 2011
(W2SP’11). IEEE, 2011.
[59] P. G. Kelley, L. F. Cranor, and N. Sadeh, “Privacy as part of the
app decision-making process,” in Proc. SIGCHI Conference on Human
Factors in Computing Systems (CHI’13). ACM, 2013.
[60] M. Harbach, M. Hettig, S. Weber, and M. Smith, “Using personal
examples to improve risk communication for security and privacy decisions,”
in Proc. SIGCHI Conference on Human Factors in Computing
Systems (CHI’14). ACM, 2014.
[61] R. Pandita, X. Xiao, W. Yang, W. Enck, and T. Xie, “WHYPER:
towards automating risk assessment of mobile applications,” in Proc.
22nd Usenix Security Symposium (SEC’13), 2013.
[62] Z. Qu, V. Rastogi, X. Zhang, Y. Chen, T. Zhu, and Z. Chen, “Autocog:
Measuring the description-to-permission fidelity in android applications,”
in Proc. 21st ACM Conference on Computer and Communication
Security (CCS’14). ACM, 2014.
[63] M. Zhang, Y. Duan, Q. Feng, and H. Yin, “Towards automatic generation
of security-centric descriptions for android apps,” in Proc. 22nd
ACM Conference on Computer and Communication Security (CCS’15).
ACM, 2015.
[64] P. Wijesekera, A. Baokar, A. Hosseini, S. Egelman, D. Wagner,
and K. Beznosov, “Android permissions remystified: A field study
on contextual integrity,” in Proc. 24th USENIX Security Symposium
(SEC’15). USENIX Association, 2015.
[65] M. Ongtang, S. E. McLaughlin, W. Enck, and P. McDaniel, “Semantically
rich application-centric security in Android,” in Proc. 25th Annual
Computer Security Applications Conference (ACSAC’09). ACM, 2009.
[66] M. Conti, V. T. N. Nguyen, and B. Crispo, “CRePE: Context-related
policy enforcement for Android,” in Proc. 13th Information Security
Conference (ISC’10). Springer, 2010.
[67] Y. Zhou, X. Zhang, X. Jiang, and V. W. Freeh, “Taming informationstealing
smartphone applications (on android),” in Proc. 4th International
Conference on Trust and Trustworthy Computing (TRUST’11).
Springer-Verlag, 2011.
[68] S. Smalley and R. Craig, “Security Enhanced (SE) Android: Bringing
Flexible MAC to Android,” in Proc. 20th Annual Network and Distributed
System Security Symposium (NDSS’13). The Internet Society,
2013.
[69] S. Bugiel, L. Davi, A. Dmitrienko, S. Heuser, A.-R. Sadeghi, and
B. Shastry, “Practical and lightweight domain isolation on android,”
in Proc. 1st ACM CCS Workshop on Security and Privacy in Mobile
Devices (SPSM’11). ACM, 2011.
[70] S. Bugiel, S. Heuser, and A.-R. Sadeghi, “Flexible and fine-grained
mandatory access control on Android for diverse security and privacy
policies,” in Proc. 22nd Usenix Security Symposium (SEC’13).
USENIX Association, 2013.
[71] S. Heuser, A. Nadkarni, W. Enck, and A.-R. Sadeghi, “Asm: A
programmable interface for extending Android security,” in Proc. 23rd
USENIX Security Symposium (SEC’14). USENIX Association, 2014.
[72] Y. Wang, S. Hariharan, C. Zhao, J. Liu, and W. Du, “Compac: Enforce
component-level access control in android,” in Proc. 4th ACM Conference
on Data and Application Security and Privacy (CODASPY’14).
ACM, 2014.
[73] S. Shekhar, M. Dietz, and D. S. Wallach, “Adsplit: Separating smartphone
advertising from applications,” in Proc. 21st Usenix Security
Symposium (SEC’12). USENIX Association, 2012.
[74] F. Roesner and T. Kohno, “Securing embedded user interfaces: Android
and beyond,” in Proc. 22nd Usenix Security Symposium (SEC’13).
USENIX Association, 2013.
[75] R. Xu, H. Saïdi, and R. Anderson, “Aurasium: Practical policy enforcement
for android applications,” in Proc. 21st Usenix Security
Symposium (SEC’12). USENIX Association, 2012.
[76] J. Jeon, K. K. Micinski, J. A. Vaughan, A. Fogel, N. Reddy, J. S. Foster,
and T. Millstein, “Dr. Android and Mr. Hide: fine-grained permissions
in android applications,” in Proc. 2nd ACM CCS Workshop on Security
and Privacy in Mobile Devices (SPSM’12). ACM, 2012.
[77] B. Davis, B. Sanders, A. Khodaverdian, and H. Chen, “I-arm-droid:
A rewriting framework for in-app reference monitors for android
applications,” in Proc. 2012 Mobile Security Technologies Workshop
(MoST’12). IEEE, 2012.[79] M. Backes, S. Bugiel, C. Hammer, O. Schranz, and P. von Styp-
Rekowsky, “Boxify: Full-fledged app sandboxing for stock android,”
in Proc. 24th USENIX Security Symposium (SEC’15). USENIX
Association, 2015.
[80] A. Chaudhuri, A. Fuchs, and J. Foster, “SCanDroid: Automated security
certification of Android applications,” University of Maryland,
Tech. Rep. CS-TR-4991, 2009.
[81] C. Gibler, J. Crussell, J. Erickson, and H. Chen, “Androidleaks:
automatically detecting potential privacy leaks in android applications
on a large scale,” in Proc. 5th International Conference on Trust and
Trustworthy Computing (TRUST’12). Springer-Verlag, 2012.
[82] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein,
Y. le Traon, D. Octeau, and P. McDaniel, “Flowdroid: Precise context,
flow, field, object-sensitive and lifecycle-aware taint analysis for
Android apps,” in Proc. ACM SIGPLAN 2014 Conference on Programming
Language Design and Implementation (PLDI’14). ACM, 2014.
[83] D. Barrera, W. Enck, and P. C. V. Oorschot, “Meteor: Seeding
a security-enhancing infrastructure for multi-market application
ecosystems,” in Proc. 2012 Mobile Security Technologies Workshop
(MoST’12). IEEE, 2012.
[84] S. Chakradeo, B. Reaves, P. Traynor, and W. Enck, “Mast: Triage for
market-scale mobile malware analysis,” in Proc. 6th ACM Conference
on Security and Privacy in Wireless and Mobile Networks (WiSec’13).
ACM, 2013.
[85] M. Grace, Y. Zhou, Q. Zhang, S. Zou, and X. Jiang, “Riskranker:
Scalable and accurate zero-day android malware detection,” in Proc.
10th International Conference on Mobile Systems, Applications, and
Services (MobiSys’12). ACM, 2012.
[86] A. Gorla, I. Tavecchia, F. Gross, and A. Zeller, “Checking app behavior
against app descriptions,” in Proc. 36th IEEE International Conference
on Software Engineering (ICSE’14). ACM, 2014.
[87] M. D. Ernst, R. Just, S. Millstein, W. Dietl, S. Pernsteiner, F. Roesner,
K. Koscher, P. B. Barros, R. Bhoraskar, S. Han, P. Vines, and
E. X. Wu, “Collaborative verification of information flow for a highassurance
app store,” in Proc. 21st ACM Conference on Computer and
Communication Security (CCS’14). ACM, 2014.
[88] K. Chen, P. Wang, Y. Lee, X. Wang, N. Zhang, H. Huang, W. Zou,
and P. Liu, “Finding unknown malice in 10 seconds: Mass vetting for
new threats at the google-play scale,” in Proc. 24th USENIX Security
Symposium (SEC’15). USENIX Association, 2015.
[89] W. Zhou, X. Zhang, and X. Jiang, “AppInk: watermarking android
apps for repackaging deterrence,” in Proc. 8th ACM Symposium on
Information, Computer and Communication Security (ASIACCS’13).
ACM, 2013.
[90] T. Wyatt, “Security alert: Geinimi, sophisticated new android trojan
found in wild,” https://blog.lookout.com/blog/2010/12/29/geinimi_
trojan/, 2010, last visited: 11/06/15.
[91] J. H. Saltzer and M. D. Schroeder, “The protection of information in
computer systems,” Proceedings of the IEEE, vol. 63, no. 9, pp. 1278–
1308, 1975.
[92] P. P. Chan, L. C. Hui, and S.-M. Yiu, “Droidchecker: analyzing android
applications for capability leak,” in Proc. 5th ACM Conference on
Security and Privacy in Wireless and Mobile Networks (WiSec’12).
ACM, 2012.
[93] N. Hardy, “The confused deputy: (or why capabilities might have been
invented),” SIGOPS Oper. Syst. Rev., vol. 22, no. 4, pp. 36–38, Oct.
1988.
[94] Google, “Review app permissions thru android 5.9,” https://support.
google.com/googleplay/answer/6014972?hl=en, last visited: 11/13/205.
[95] A. P. Felt, S. Egelman, M. Finifter, D. Akhawe, and D. Wagner, “How
to ask for permission,” in hotsec12. USENIX Association, 2012.
[96] F. Roesner, T. Kohno, A. Moshchuk, B. Parno, H. J. Wang, and
C. Cowan, “User-driven access control: Rethinking permission granting
in modern operating systems,” in Proc. 33rd IEEE Symposium on
Security and Privacy (SP’12). IEEE, 2012.
[97] B. Liu, J. Lin, and N. Sadeh, “Reconciling mobile app privacy and
usability on smartphones: Could user privacy profiles help?” in Proc.
23rd International Conference on World Wide Web (WWW’14). ACM,
2014.
[98] C. Marforio, H. Ritzdorf, A. Francillon, and S. C? apkun, “Analysis
of the communication between colluding applications on modern
smartphones,” in Proc. 28th Annual Computer Security Applications
Conference (ACSAC’12). ACM, 2012.
[99] E. Chin, A. P. Felt, V. Sekar, and D. Wagner, “Measuring user
confidence in smartphone security and privacy,” in Proc. 8th Symposium
on Usable Privacy and Security (SOUPS’12). ACM, 2012.
[100] A. C. Myers and B. Liskov, “A decentralized model for information
flow control,” in Proc. 16th ACM Symposium on Operating Systems
Principles (SOSP’97). ACM, 1997.
[101] N. Zeldovich, S. Boyd-Wickizer, and D. Mazières, “Securing distributed
systems with information flow control,” in Proc. 5th
USENIX Symposium on Networked Systems Design and Implementation
(NSDI’08). USENIX Association, 2008.
[102] Open Handset Alliance, “Android,” http://www.openhandsetalliance.
com/android_overview.html, last visited: 11/13/2015.
[103] M. Souppaya and K. Scarfone, “NIST Special Publication 800-124
Revision 1: Guidelines for Managing the Security of Mobile Devices
in the Enterprise,” Jun. 2013.
[104] Ú. Erlingsson, “The inlined reference monitor approach to security
policy enforcement,” Ph.D. dissertation, Cornell University, January
2004.
[105] R. Mallempati, “Google i/o recap, part 1:
Google is serious about enterprise mobility,” Online:
https://www.mobileiron.com/en/smartwork-blog/
google-io-recap-part-1-google-serious-about-enterprise-mobility,
Jun. 2014, last visited: 11/13/2015.
[106] lohan, “Antilvl: android cracking,” http://androidcracking.blogspot.in/
p/antilvl_01.html, last visited: 11/06/15.
[107] X. Zhou, Y. Lee, N. Zhang, M. Naveed, and X. Wang, “The peril of
fragmentation: Security hazards in android device driver customizations,”
in Proc. 2014 IEEE Symposium on Security and Privacy
(SP’14). IEEE Computer Society, 2014.
[108] D. R. Thomas, A. R. Beresford, and A. Rice, “Security metrics for the
android ecosystem,” in Proc. 5th ACM CCS Workshop on Security and
Privacy in Mobile Devices (SPSM’15). ACM, 2015.
[109] Google, “Nexus security bulletins,” https://source.android.com/security/
bulletin/index.html, last visited: 11/13/2015.
[110] R. Brandom, “Android marshmallow’s best security measure
is a simple date,” http://www.theverge.com/2015/9/29/9415313/
android-marshmallow-security-update-vulnerability, 2015, last visited:
11/12/2015.
[111] J. S. Shapiro, J. M. Smith, and D. J. Farber, “EROS: a fast capability
system,” in Proc. 17th ACM Symposium on Operating Systems Principles
(SOSP’99). ACM, 1999.referencesrp