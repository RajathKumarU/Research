Evaluation of Cryptography Usage in Android ApplicationstitlerpMobile application developers are using cryptography in their products to protect sensitive data like passwords, short messages, documents etc. In this paper, we study whether cryptography and related techniques are employed in a proper way, in order to protect these private data. To this end, we downloaded 49 Android applications from the Google Play marketplace and performed static and dynamic analysis in an attempt to detect possible cryptographic misuses. The results showed that 87.8% of the applications present some kind of misuse, while for the rest of them no cryptography usage was detected during the analysis. Finally, we suggest countermeasures, mainly intended for developers, to alleviate the issues identified by the analysis.abstractrpSoftware security, Android, Cryptography misusekeywordsrpThe need to privately share information in a manner that would be understandable to only a specific group of people exists for thousands of years before computer’s invention and establishment. The existence of cryptographic algorithms akin to Caesar’s Cipher proves that contemporary cryptography has its origins in Caesar’s era, when attempts to achieve information security began to take place. Thus, the field of cryptography is not new and efforts towards its improvement exist for many years.
The rapid technological progress in the last years has led to the emergence of smartphones which, apart from voice and SMS, support Internet access, standalone applications, and wireless connectivity. The same devices are used by a large proportion of users to install applications that store sensitive data like passwords, location, and social network interactions.
The need for privacy imposes cryptography utilization in applications that manage these sensitive data [12]. To this end developers embed cryptographic techniques in their mobile applications; and while cryptography is a long existing field, developers rarely have knowledge of information security. As a consequence, incidents of data breaching and disclosure are very frequent, while there are cases of popular products that claim to be secure although they utilize practically no security; a recent infamous example is NQ Mobile Vault application [18], which was discovered that it uses a simple XOR function to perform secure sensitive users’ data.
Regarding the academic activity in the specific domain, a lot of research has been conducted and many studies have been realized; however, none of them has yet concentrated on a set of good and bad practices, as each work aims at giving prominence to the specific cryptographic mistakes of the applications and not at developers training. Our contributions, in this paper, are: (a) to evaluate the use of cryptographic techniques in real world Android applications and feature the most common misuses, and (b) to provide a list of good practices for developers in order to alleviate the identified issues. The reason we focus on Android is because it is one of the prominent smartphone platforms with a relatively stable cryptographic API (Java’s Cipher), and has numerous applications available.
Our approach regarding application analysis was to employ a combination of both techniques of static and dynamic analysis, so as to succeed in producing more accurate results. Generally, the term Static Analysis refers to the process of detecting software errors and defects or security flaws by examining the source code of a program without executing it, and can also be utilized to ensure conformance with specific programming requirements. Static Analysis is considered as a part of code review process and provides better perception of code structure [13]. Developers frequently perform static analysis combining automated tools and visual source code inspection [22].
On the other hand, Dynamic Analysis refers to the testing and evaluation of a program based on its execution and it is usually
performed with a view to detecting subtle defects or vulnerabilities manifested during runtime, the cause of which is too perplex to be detected via static analysis [27]. Developers, through a dynamic test, are capable of monitoring system memory, functional behavior, response time, and overall performance of the system [26]. Therefore, there are cases where a single component from the abovementioned list is selected to be examined (e.g. system memory) in order to seek only for specific types of errors.
Regarding the advantages of the two methods, Static Analysis is the most thorough technique and the developers using it are capable of identifying the exact location of weaknesses in the code, as well as of examining all possible execution paths and variable values and not just those invoked during execution. Moreover, Static Analysis reveals errors in the initial stages of the development life cycle, reducing the cost to fix and preventing errors from manifesting themselves and triggering any incident. Dynamic Analysis is more flexible regarding the possibility to test the application for apropos specified error categories only, for instance security flaws. What is more, via Dynamic Analysis it is technically feasible to test applications even if there is no access to their source code. Finally, Dynamic Analysis can be utilized as a validation of Static Analysis results.
Nevertheless, the two methods of analysis have many disadvantages both due to their nature per se, but also due to the fact that the use of automated tools for analysis is widespread. In cases where automated tools are utilized, the significant number of false positives and false negatives constitute the main drawback in both types of analysis as the tools’ efficiency is highly dependent on the rules defined for software scanning. This specific fact remarks the necessity for the human factor involvement for understanding whether the tool alerted a real error or not. Additionally, Static Analysis cannot provide satisfactory results regarding memory leaks and concurrency errors. In order to detect this type of faults it is necessary to execute the software. Lastly, when Static Analysis is performed by a tool, there is a limitation regarding the programming languages that can be supported. Consequently, we can deduce that the two approaches are complementary as no single approach can find every possible type of error. Moreover, taking into account automated tools’ inefficiencies, we have chosen to use manual static analysis in combination with dynamic analysis, so as to have more accurate results.
Using a combination of static and dynamic analysis, we evaluated a total of 49 Android applications downloaded from the Google Play marketplace. Our overall results feature that 87.8% of the applications show evidence of cryptography misuse, while for the rest 12.2% no cryptography was detected from our analyses. This high proportion of misuse amplifies our previous argument that developers rarely understand how to correctly incorporate cryptography in their applications.
The rest of our paper is organized as follows. Section 2 briefly presents important cryptographic concepts, while section 3 analyzes the related work. Section 4 elaborates on a set of cryptographic weaknesses that we will be used to evaluate the cryptographic security of the examined applications. Section 5 analyzes the carried out experiments by presenting the methodology for static and dynamic analysis. Section 6 evaluates the cryptographic security of the mobile application by analyzing the numerical results, while section 7 concludes the article.introductionrpIn this paper, we have evaluated the use of cryptography in 49 Android applications whose operation is related to data encryption. The results showed that the majority of applications present at least one of those misuses. Developers’ community lacks a specifically defined list of cryptographic misuses that must be avoided, as well as a list of best practices for cryptographic techniques. To this end, we provide guidelines, mainly intended for developers, to help them build more secure applications.conclusionrp[1] Bardou, R., Focardi, R., Kawamoto, Y., Simionato, L., Steel, G. and Tsay, J.-K. 2012. Efficient Padding Oracle Attacks on Cryptographic Hardware. Advances in Cryptology – CRYPTO 2012. R. Safavi-Naini and R. Canetti, eds. Springer Berlin Heidelberg. 608–625.
[2] Bellare, M., Desai, A., Pointcheval, D. and Rogaway, P. 1998. Relations among notions of security for public-key encryption schemes. Advances in Cryptology — CRYPTO ’98. H. Krawczyk, ed. Springer Berlin Heidelberg. 26–45.
[3] Das, S., Gopal, V., King, K. and Venkatraman, A. 2014. IV = 0 Security: Cryptographic Misuse of Libraries. Technical Report #6.857 final project. MIT.
[4] Egele, M., Brumley, D., Fratantonio, Y. and Kruegel, C. 2013. An Empirical Study of Cryptographic Misuse in Android Applications. Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security (New York, NY, USA, 2013), 73–84.
[5] Hofheinz, D. and Unruh, D. 2008. Towards Key-Dependent Message Security in the Standard Model. Advances in Cryptology – EUROCRYPT 2008. N. Smart, ed. Springer Berlin Heidelberg. 108–126.
[6] How to encrypt files in Java with AES, CBC mode, using Bouncy Castle API and NetBeans or Eclipse | IT&C Solutions: http://www.itcsolutions.eu/2011/08/24/how-to-encrypt-decrypt-files-in-java-with-aes-in-cbc-mode-using-bouncy-castle-api-and-netbeans-or-eclipse/. Accessed: 2015-10-20.
[7] Java Decompiler: http://jd.benow.ca/. Accessed: 2015-10-20.
[8] John’s Cryptography Blog: AES CBC Padding Oracle Attack: http://johnx.blogspot.gr/2010/10/aes-cbc-padding-oracle.html. Accessed: 2015-09-10.
[9] Klima, V. and Rosa, T. 2003. Side Channel Attacks on CBC Encrypted Messages in the PKCS#7 Format. Cryptology ePrint Archive, Report 2003/098 (2003).
[10] Lazar, D., Chen, H., Wang, X. and Zeldovich, N. 2014. Why Does Cryptographic Software Fail?: A Case Study and Open Problems. Proceedings of 5th Asia-Pacific Workshop on Systems (New York, NY, USA, 2014), 7:1–7:7.
[11] Li, Y., Zhang, Y., Li, J. and Gu, D. 2014. iCryptoTracer: Dynamic Analysis on Misuse of Cryptography Functions in iOS Applications. Network and System Security. M.H. Au, B. Carminati, and C.-C.J. Kuo, eds. Springer International Publishing. 349–362.
[12] Markantonakis, K., Akram, R.N. and Msgna, M.G. 2015. Secure and Trusted Application Execution on Embedded Devices. Proceedings of the 8th International Conference on Security for Information Technology and Communications (Bucharest, Romania, Jun. 2015).
[13] McConnell, S. 2004. Code Complete: A Practical Handbook of Software Construction, Second Edition. Microsoft Press.
[14] MITRE - CWE-780: Use of RSA Algorithm without OAEP (2.8): http://cwe.mitre.org/data/definitions/780.html. Accessed: 2015-09-10.
[15] MOTOROLA 2012. ?est practices for encryption in ?ndroid. White Paper.
[16] Nishika and Yadav, R.K. 2013. Cryptography on Android Message Applications – A Review. International Journal on Computer Science and Engineering. (2013), 362–367.
[17] NIST Cryptographic Standards and Guidelines Development Process: http://www.nist.gov/director/vcat/cryptographic-standards-guidelines-process.cfm. Accessed: 2015-09-09.
[18] NQ Mobile Vault: The popular encryption app has laughably crackable encryption.: http://www.slate.com/articles/technology/bitwise/2015/04/nq_mobile_vault_the_popular_encryption_app_has_laughably_crackable_encryption.html. Accessed: 2015-10-20.
[19] Padding oracle attacks: in depth: https://blog.skullsecurity.org/2013/padding-oracle-attacks-in-depth. Accessed: 2015-09-10.
[20] pxb1988/dex2jar · GitHub: https://github.com/pxb1988/dex2jar. Accessed: 2015-10-20.
[21] Rizzo, J. and Duong, T. 2010. Practical Padding Oracle Attacks. Proceedings of the 4th USENIX Conference on Offensive Technologies (Berkeley, CA, USA, 2010), 1–8.
[22] RSA/ECB/<SomePaddingScheme> - How block operation modes and asymmetric ciphers fit together: http://armoredbarista.blogspot.gr/2012/09/rsaecb-how-block-operation-modes-and.html. Accessed: 2015-10-20.
[23] Security Tips | Android Developers: http://developer.android.com/training/articles/security-tips.html. Accessed: 2015-09-09.
[24] Shuai, S., Guowei, D., Tao, G., Tianchang, Y. and Chenjie, S. 2014. Modelling Analysis and Auto-detection of Cryptographic Misuse in Android Applications. IEEE 12th International Conference on Dependable, Autonomic and Secure Computing (DASC) (Aug. 2014), 75–80.
[25] Static Code Analysis - OWASP: https://www.owasp.org/index.php/Static_Code_Analysis. Accessed: 2015-10-20.
[26] Static Testing vs. Dynamic Testing | Veracode: https://www.veracode.com/blog/2013/12/static-testing-vs-dynamic-testing. Accessed: 2015-10-20.
[27] Static vs. dynamic code analysis -- GCN: https://gcn.com/articles/2009/02/09/static-vs-dynamic-code-analysis.aspx. Accessed: 2015-10-20.
[28] The Padding Oracle Attack - why crypto is terrifying: http://robertheaton.com/2013/07/29/padding-oracle-attack/. Accessed: 2015-09-10.
[29] Vaudenay, S. 2002. Security Flaws Induced by CBC Padding — Applications to SSL, IPSEC, WTLS... Advances in Cryptology — EUROCRYPT 2002. L.R. Knudsen, ed. Springer Berlin Heidelberg. 534–545.
[30] Viega, J. 2003. Practical random number generation in software. Computer Security Applications Conference, 2003. Proceedings. 19th Annual (Dec. 2003), 129–140.referencesrp